import os
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiohttp import web
import threading

TOKEN = os.getenv('BOT_TOKEN')
CHANNEL = "@dijitrail"
ADMIN_IDS = [7683939912]

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
class Database:
    def __init__(self):
        self.conn = sqlite3.connect('bot.db', check_same_thread=False)
        self.init_db()
    
    def init_db(self):
        c = self.conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (user_id INTEGER PRIMARY KEY, username TEXT, referrer_id INTEGER, 
                     referrals INTEGER DEFAULT 0, balance INTEGER DEFAULT 0, 
                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS referral_links
                     (referrer_id INTEGER, referred_id INTEGER, 
                     UNIQUE(referrer_id, referred_id))''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS admin_logs
                     (admin_id INTEGER, action TEXT, target_id INTEGER, 
                     amount INTEGER, reason TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        self.conn.commit()
    
    def add_user(self, user_id: int, username: str, referrer_id: int = None):
        c = self.conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        existing_user = c.fetchone()
        
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            c.execute("INSERT INTO users (user_id, username, referrer_id, balance) VALUES (?, ?, ?, ?)", 
                     (user_id, username, referrer_id, 0))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            if referrer_id and referrer_id != user_id:
                c.execute("SELECT * FROM referral_links WHERE referrer_id = ? AND referred_id = ?", 
                         (referrer_id, user_id))
                if not c.fetchone():
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
                    c.execute("INSERT INTO referral_links (referrer_id, referred_id) VALUES (?, ?)", 
                             (referrer_id, user_id))
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    c.execute("UPDATE users SET referrals = referrals + 1, balance = balance + 1 WHERE user_id = ?", 
                             (referrer_id,))
        
        self.conn.commit()
    
    def get_user_data(self, user_id: int):
        c = self.conn.cursor()
        c.execute("SELECT referrals, balance FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        return result if result else (0, 0)
    
    def update_balance(self, user_id: int, amount: int):
        c = self.conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        if not c.fetchone():
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            c.execute("INSERT INTO users (user_id, username, balance) VALUES (?, ?, ?)", 
                     (user_id, "unknown", max(0, amount)))
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        
        self.conn.commit()
    
    def clear_balance(self, user_id: int):
        c = self.conn.cursor()
        c.execute("UPDATE users SET balance = 0 WHERE user_id = ?", (user_id,))
        self.conn.commit()
    
    def get_all_users(self):
        c = self.conn.cursor()
        c.execute("SELECT user_id FROM users")
        users = [row[0] for row in c.fetchall()]
        return users
    
    def add_admin_log(self, admin_id: int, action: str, target_id: int = None, amount: int = None, reason: str = None):
        c = self.conn.cursor()
        c.execute("INSERT INTO admin_logs (admin_id, action, target_id, amount, reason) VALUES (?, ?, ?, ?, ?)",
                 (admin_id, action, target_id, amount, reason))
        self.conn.commit()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    
    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except:
            pass
    
    db.add_user(user_id, username, referrer_id)
    
    if await check_subscription(user_id):
        await show_main_menu(message, user_id)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
        ])
        
        await message.answer("‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>", reply_markup=keyboard)

async def show_main_menu(message, user_id: int = None):
    if not user_id:
        user_id = message.from_user.id
    
    referrals_count, balance = db.get_user_data(user_id)
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∞ —Ä–æ–±—É–∫—Å–æ–≤", callback_data="buy_robux")],
        [InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")]
    ])
    
    text = f"""<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>
üîó –¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>

1 –¥—Ä—É–≥ = 1 —Ä–µ—Ñ. = 1 —Ä–æ–±—É–∫—Å!"""
    
    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_clear_balance")],
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="back_to_main")]
    ])
    
    await message.answer("üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=keyboard)

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    users = db.get_all_users()
    total_balance = 0
    total_referrals = 0
    
    for user_id in users:
        referrals, balance = db.get_user_data(user_id)
        total_balance += balance
        total_referrals += referrals
    
    text = f"""<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{total_balance}</b>
üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_referrals}</b>"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="back_to_admin")]
    ])
    
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "admin_add_balance")
async def admin_add_balance_menu(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="back_to_admin")]
    ])
    
    await call.message.edit_text(
        "üí∞ <b>–í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/add_balance user_id amount</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/add_balance 123456789 100</code>\n\n"
        "<i>–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É</i>",
        reply_markup=keyboard
    )

@dp.message(Command("add_balance"))
async def add_balance_command(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π: /add_balance user_id amount")
            return
        
        target_id = int(parts[1])
        amount = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å
        old_referrals, old_balance = db.get_user_data(target_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        db.update_balance(target_id, amount)
        db.add_admin_log(message.from_user.id, "add_balance", target_id, amount)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        _, new_balance = db.get_user_data(target_id)
        
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ–±–Ω–æ–≤–ª–µ–Ω!\n–ë—ã–ª–æ: {old_balance} —Ä–µ—Ñ.\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} —Ä–µ—Ñ.\n–°—Ç–∞–ª–æ: {new_balance} —Ä–µ—Ñ.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(target_id, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª —Ç–µ–±–µ <b>{amount} —Ä–µ—Ñ.</b> –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä–µ—Ñ.")
        except:
            pass
            
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! user_id –∏ amount –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

@dp.message(Command("clear"))
async def clear_balance_command(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π: /clear user_id –ø—Ä–∏—á–∏–Ω–∞")
            return
        
        target_id = int(parts[1])
        reason = parts[2]
        
        old_referrals, old_balance = db.get_user_data(target_id)
        db.clear_balance(target_id)
        db.add_admin_log(message.from_user.id, "clear_balance", target_id, -old_balance, reason)
        
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –æ—á–∏—â–µ–Ω!\n–ë—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ: {old_balance} —Ä–µ—Ñ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(target_id, f"‚ö†Ô∏è <b>–í–∞—à –±–∞–ª–∞–Ω—Å –æ—á–∏—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–°–ø–∏—Å–∞–Ω–æ: {old_balance} —Ä–µ—Ñ.")
        except:
            pass
            
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data == "get_server")
async def get_server(call: types.CallbackQuery):
    if await check_subscription(call.from_user.id):
        await call.answer()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await call.message.edit_text("üñ•Ô∏è <b>–¢–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:</b>\n<code>test-server.com</code>", reply_markup=keyboard)
    else:
        await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.callback_query(F.data == "referrals")
async def show_referrals(call: types.CallbackQuery):
    referrals_count, balance = db.get_user_data(call.from_user.id)
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={call.from_user.id}"
    
    await call.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    text = f"""<b>üë• –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>

1 –¥—Ä—É–≥ = 1 —Ä–µ—Ñ. = 1 —Ä–æ–±—É–∫—Å!"""
    
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "buy_robux")
async def buy_robux(call: types.CallbackQuery):
    referrals_count, balance = db.get_user_data(call.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ–±—É–∫—Å (1 —Ä–µ—Ñ.)", callback_data="buy_test_robux")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    text = f"""<b>üõí –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–±—É–∫—Å–æ–≤</b>

üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>

–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"""
    
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "buy_test_robux")
async def buy_test_robux(call: types.CallbackQuery):
    referrals_count, balance = db.get_user_data(call.from_user.id)
    
    if balance >= 1:
        db.update_balance(call.from_user.id, -1)
        await call.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!", show_alert=True)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="buy_robux")]
        ])
        await call.message.edit_text("üéâ <b>–¢—ã –∫—É–ø–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ–±—É–∫—Å!</b>\n\n–í–æ—Ç —Ç–≤–æ–π –∫–æ–¥: <code>TEST-ROBUX-123</code>", reply_markup=keyboard)
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!", show_alert=True)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(call: types.CallbackQuery):
    await show_main_menu(call, call.from_user.id)

@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_add_balance")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_clear_balance")],
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data="back_to_main")]
    ])
    
    await call.message.edit_text("üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=keyboard)

@dp.callback_query(F.data == "check_sub")
async def check_subscription_callback(call: types.CallbackQuery):
    if await check_subscription(call.from_user.id):
        await show_main_menu(call, call.from_user.id)
    else:
        await call.answer("‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
async def handle(request):
    return web.Response(text="Bot is alive!")

def run_web_server():
    app = web.Application()
    app.router.add_get('/', handle)
    port = int(os.environ.get('PORT', 5000))
    web.run_app(app, host='0.0.0.0', port=port)

async def main():
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_IDS[0]}")
    print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ—á–∏—Å—Ç–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot, drop_pending_updates=True, allowed_updates=['message', 'callback_query'])

if __name__ == "__main__":
    asyncio.run(main())