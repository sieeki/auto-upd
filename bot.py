import os
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

TOKEN = os.getenv('BOT_TOKEN')
CHANNEL = "@dijitrail"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ username —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, referrer_id INTEGER, referrals INTEGER DEFAULT 0)''')
    conn.commit()
    conn.close()

init_db()

def add_user(user_id: int, username: str, referrer_id: int = None):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not c.fetchone():
        c.execute("INSERT INTO users (user_id, username, referrer_id) VALUES (?, ?, ?)", 
                 (user_id, username, referrer_id))
        
        if referrer_id:
            c.execute("UPDATE users SET referrals = referrals + 1 WHERE user_id = ?", (referrer_id,))
    
    conn.commit()
    conn.close()

def get_referrals_count(user_id: int) -> int:
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
    count = c.fetchone()[0]
    conn.close()
    return count

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except:
            pass
    
    add_user(user_id, username, referrer_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if await check_subscription(user_id):
        referrals_count = get_referrals_count(user_id)
        ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
            [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
            [InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")]
        ])
        
        text = f"""<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üîó –¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:"""
        
        await message.answer(text, reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
        ])
        
        await message.answer("‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>", reply_markup=keyboard)

@dp.callback_query(F.data == "get_server")
async def get_server(call: types.CallbackQuery):
    if await check_subscription(call.from_user.id):
        await call.answer()
        await call.message.edit_text("üñ•Ô∏è <b>–¢–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:</b>\n<code>test-server.com</code>")
    else:
        await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.callback_query(F.data == "referrals")
async def show_referrals(call: types.CallbackQuery):
    referrals_count = get_referrals_count(call.from_user.id)
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={call.from_user.id}"
    
    await call.answer()
    
    text = f"""<b>üë• –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>

–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!"""
    
    await call.message.edit_text(text)

@dp.callback_query(F.data == "check_sub")
async def check_subscription_callback(call: types.CallbackQuery):
    if await check_subscription(call.from_user.id):
        referrals_count = get_referrals_count(call.from_user.id)
        ref_link = f"https://t.me/{(await bot.get_me()).username}?start={call.from_user.id}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
            [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")]
        ])
        
        text = f"""<b>–û—Ç–ª–∏—á–Ω–æ! ‚úÖ</b>

–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üîó –¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:"""
        
        await call.message.edit_text(text, reply_markup=keyboard)
    else:
        await call.answer("‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())