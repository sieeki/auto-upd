import os
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiohttp import web
import threading

TOKEN = os.getenv('BOT_TOKEN')
CHANNEL = "@dijitrail"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db', check_same_thread=False)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, referrer_id INTEGER, referrals INTEGER DEFAULT 0, balance INTEGER DEFAULT 0)''')
    conn.commit()
    conn.close()

init_db()

def add_user(user_id: int, username: str, referrer_id: int = None):
    conn = sqlite3.connect('bot.db', check_same_thread=False)
    c = conn.cursor()
    
    c.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not c.fetchone():
        c.execute("INSERT INTO users (user_id, username, referrer_id, balance) VALUES (?, ?, ?, ?)", 
                 (user_id, username, referrer_id, 0))
        
        if referrer_id:
            c.execute("UPDATE users SET referrals = referrals + 1, balance = balance + 1 WHERE user_id = ?", (referrer_id,))
    
    conn.commit()
    conn.close()

def get_user_data(user_id: int):
    conn = sqlite3.connect('bot.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT referrals, balance FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result if result else (0, 0)

def update_balance(user_id: int, amount: int):
    conn = sqlite3.connect('bot.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    
    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except:
            pass
    
    add_user(user_id, username, referrer_id)
    
    if await check_subscription(user_id):
        referrals_count, balance = get_user_data(user_id)
        ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
            [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
            [InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∞ —Ä–æ–±—É–∫—Å–æ–≤", callback_data="buy_robux")],
            [InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")]
        ])
        
        text = f"""<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>
üîó –¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>

1 –¥—Ä—É–≥ = 1 —Ä–µ—Ñ. = 1 —Ä–æ–±—É–∫—Å!"""
        
        await message.answer(text, reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
        ])
        
        await message.answer("‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>", reply_markup=keyboard)

@dp.callback_query(F.data == "get_server")
async def get_server(call: types.CallbackQuery):
    if await check_subscription(call.from_user.id):
        await call.answer()
        await call.message.edit_text("üñ•Ô∏è <b>–¢–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:</b>\n<code>test-server.com</code>")
    else:
        await call.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.callback_query(F.data == "referrals")
async def show_referrals(call: types.CallbackQuery):
    referrals_count, balance = get_user_data(call.from_user.id)
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={call.from_user.id}"
    
    await call.answer()
    
    text = f"""<b>üë• –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>

1 –¥—Ä—É–≥ = 1 —Ä–µ—Ñ. = 1 —Ä–æ–±—É–∫—Å!"""
    
    await call.message.edit_text(text)

@dp.callback_query(F.data == "buy_robux")
async def buy_robux(call: types.CallbackQuery):
    referrals_count, balance = get_user_data(call.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ–±—É–∫—Å (1 —Ä–µ—Ñ.)", callback_data="buy_test_robux")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    text = f"""<b>üõí –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–±—É–∫—Å–æ–≤</b>

üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>

–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"""
    
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "buy_test_robux")
async def buy_test_robux(call: types.CallbackQuery):
    referrals_count, balance = get_user_data(call.from_user.id)
    
    if balance >= 1:
        update_balance(call.from_user.id, -1)
        await call.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!", show_alert=True)
        await call.message.edit_text("üéâ <b>–¢—ã –∫—É–ø–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ–±—É–∫—Å!</b>\n\n–í–æ—Ç —Ç–≤–æ–π –∫–æ–¥: <code>TEST-ROBUX-123</code>")
    else:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!", show_alert=True)

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(call: types.CallbackQuery):
    referrals_count, balance = get_user_data(call.from_user.id)
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={call.from_user.id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∞ —Ä–æ–±—É–∫—Å–æ–≤", callback_data="buy_robux")],
        [InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL[1:]}")]
    ])
    
    text = f"""<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>
üîó –¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>

1 –¥—Ä—É–≥ = 1 —Ä–µ—Ñ. = 1 —Ä–æ–±—É–∫—Å!"""
    
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "check_sub")
async def check_subscription_callback(call: types.CallbackQuery):
    if await check_subscription(call.from_user.id):
        referrals_count, balance = get_user_data(call.from_user.id)
        ref_link = f"https://t.me/{(await bot.get_me()).username}?start={call.from_user.id}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
            [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
            [InlineKeyboardButton(text="üõí –ü–æ–∫—É–ø–∫–∞ —Ä–æ–±—É–∫—Å–æ–≤", callback_data="buy_robux")]
        ])
        
        text = f"""<b>–û—Ç–ª–∏—á–Ω–æ! ‚úÖ</b>

–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referrals_count}</b>
üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä–µ—Ñ.</b>
üîó –¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>

1 –¥—Ä—É–≥ = 1 —Ä–µ—Ñ. = 1 —Ä–æ–±—É–∫—Å!"""
        
        await call.message.edit_text(text, reply_markup=keyboard)
    else:
        await call.answer("‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
async def handle(request):
    return web.Response(text="Bot is alive!")

def run_web_server():
    app = web.Application()
    app.router.add_get('/', handle)
    port = int(os.environ.get('PORT', 5000))
    web.run_app(app, host='0.0.0.0', port=port)

async def main():
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())